@using System.Reflection
@using System.Reflection.Emit
@using srbrettle.FinancialFormulas

<div class="m-2">
    <div hidden="hidden">Counter: @Counter</div>
    <h5>
        @MethodInfo.Name
    </h5>

    
    @foreach (var param in MethodInfo.GetParameters())
    {
        <div class="m-1">
            <div>
                <div>@param.Name (<small>@param.ParameterType</small>)</div>
            </div>

            <input name="@param.Name"
               @bind="@methodParams[param.Name!]"
               @bind:event="oninput"
               @onchange="() => { Calc(); }"
               type="text"
               placeholder="1" />

        </div>
    }

    @{
        Calc();
    }

    <p>Result: @Result.result</p>
    <p class="alert-warning">@Result.error</p>


    @{

        void Calc()
        {
            try
            {
                object?[] parameters = methodParams.Select(o =>
                {
                    // Console.WriteLine($"o: {o.Key}: {o.Value}");

                    if (Decimal.TryParse(o.Value, out decimal v))
                    {
                        return v;
                    }

                    return 0;
                }).Cast<object>().ToArray();

                var result = MethodInfo.Invoke(typeof(BankingFormulas), parameters);
                Result = (result!.ToString(), "");

            }
            //catch (TargetParameterCountException){}
            catch (Exception e)
            {
                Result = ("error!", e.Message);
            }
            finally
            {
                Counter += 1;
            }
        }
    }

</div>



@code {

    int Counter = 0;

    [Parameter]
    public MethodInfo MethodInfo { get; set; }

    Dictionary<string, string> methodParams = new();


    private (string result, string error) Result { get; set; }

}

@functions
{
    protected override void OnInitialized()
    {
        
        foreach (var param in MethodInfo.GetParameters())
        {
            methodParams[param.Name!] = "1";
        }

        Console.WriteLine($"{MethodInfo.Name} Params length: {MethodInfo.GetParameters().Length}");
        base.OnInitialized();

    }
}
