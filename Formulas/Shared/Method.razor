@using System.Reflection
@using System.Reflection.Emit
@using srbrettle.FinancialFormulas

<div >
    <div hidden="hidden">Counter: @Counter</div>
    <h5 class="m-0">
        @MethodInfo.Name
    </h5>


    <div class="row" id="@MethodInfo.Name">
        @{
            int i = 0;
        }
        <table class="arrowes-table table-striped">
            <thead>
                <tr>
                    <th>name</th>
                    <th>value</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var param in MethodInfo.GetParameters())
                {
                    <tr class="m-1 row-cols-2" id="@($"tr{@i++}")">
                        <td>@param.Name</td>
                        <td>


                            <input name="@param.Name"
                               @bind="@methodParams[param.Name!]"
                               @bind:event="oninput"
                               @onchange="() => { Calc(); }"
                               type="text"
                               placeholder="@param.ParameterType" />
                        </td>

                    </tr>
                }

                <tr class="m-1 row-cols-2" id="@($"tr{@i++}")">
                    <td>Result</td>
                    <td class="fw-bold" >
                        <div id="@($"tr{@i}_result")">@Result.result</div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>



    @{
        Calc();
    }
    <p class="alert-warning">@Result.error</p>


    @{

        void Calc()
        {
            try
            {
                var parameterError = "";
                object?[] parameters = methodParams.Select(o =>
                {
                    // Console.WriteLine($"o: {o.Key}: {o.Value}");

                    if (Decimal.TryParse(o.Value, out decimal v))
                    {
                        return v;
                    }
                    else
                    {
                        parameterError = "cannot parse value from input";
                    }

                    return 0;
                }).Cast<object>().ToArray();

                if (string.IsNullOrEmpty(parameterError))
                {
                    var result = MethodInfo.Invoke(typeof(BankingFormulas), parameters);
                    var previousResult = Result;
                    Result = (result!.ToString(), "");
                    if ((result!.ToString(), "") != previousResult)
                    {
                        StateHasChanged();
                    }
                }

            }
            //catch (TargetParameterCountException){}
            catch (Exception e)
            {
                Result = ("error!", e.Message);
            }
            finally
            {
                Counter += 1;
                
            }
        }
    }

</div>



@code {

    int Counter = 0;

    [Parameter]
    public MethodInfo MethodInfo { get; set; }

    Dictionary<string, string> methodParams = new();


    private (string result, string error) Result { get; set; }

}

@functions
{
    protected override void OnInitialized()
    {

        foreach (var param in MethodInfo.GetParameters())
        {
            methodParams[param.Name!] = "";
        }

        Console.WriteLine($"{MethodInfo.Name} Params length: {MethodInfo.GetParameters().Length}");
        base.OnInitialized();

    }
}
